#!KAMAILIO
#-- MAIN ROUTING SECTION
# -1- request route
# -2- req init
# -3- within dialog
# -4- relay
# -5- uri update for dialog request
# -6- manage branch
# -7- manage reply
# -8- manage failure
# -9- optionnaly block 3XX

request_route {

    # log the basic info regarding this call
    xlog("L_INFO", "$ci|start|\n");
    xlog("L_INFO", "$ci|log|===================================================\n");
    xlog("L_INFO", "$ci|log| New SIP message $rm with call-ID $ci \n");
    xlog("L_INFO", "$ci|log|---------------------------------------------------\n");
    xlog("L_INFO", "$ci|log| received $pr request $rm $ou\n");
    xlog("L_INFO", "$ci|log| source $si:$sp\n");
    xlog("L_INFO", "$ci|log| from $fu\n");
    xlog("L_INFO", "$ci|log| to $tu\n");
    xlog("L_INFO", "$ci|log|---------------------------------------------------\n");
    xlog("L_INFO", "$ci|log|---------------------------------------------------\n");

    # siptrace
    #!ifdef WITH_SIPTRACE
      sip_trace();
      setflag(22);
    #!endif

    # per request initial checks
    route(REQINIT);

    # NAT detection
    route(NATDETECT);

    # OPTION processing
    if(is_method("OPTIONS") && uri==myself) {
        sl_send_reply("200","Keepalive");
        xlog("L_INFO", "$ci|log| Send SIP answer 200-OK - Keepalive\n");
        xlog("L_INFO", "$ci|stop|=================================================\n");
        exit;
    }

    # handle requests within SIP dialogs
    route(WITHINDLG);

    ### only initial requests (no To tag)

    # CANCEL processing
    if (is_method("CANCEL")) {
        if (t_check_trans()) {
            route(RELAY);
        }
        exit;
    }

    # handle retransmissions
    if(t_precheck_trans()) {
        t_check_trans();
        exit;
    }
    t_check_trans();

    # authentication
    route(AUTH);

    # record routing for dialog forming requests (in case they are routed)
    # - remove preloaded route headers
    remove_hf("Route");
    if (is_method("INVITE|SUBSCRIBE")) {
        record_route();
    }

    # account only INVITEs
    if (is_method("INVITE")) {
        setflag(FLT_ACC); # do accounting
    }

    # handle presence related requests
    route(PRESENCE);

    # handle registrations
    #!ifdef WITH_REGISTRAR
      if (is_method("REGISTER")) {
          route(REGISTRAR);
      }
    #!endif

    if ($rU==$null) {
        # request with no Username in RURI
        xlog("L_INFO", "$ci|stop|-------SIP 484---------------\n");
        sl_send_reply("484","Address Incomplete");
        exit;
    }

    # save callee ID
    $avp(callee) = $rU;
    route(DISPATCH);

    route(RELAY);
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
    xlog("L_INFO", "$ci|log|--MANAGE_BRANCH--\n");
    xlog("L_INFO", "$ci|log|--new branch [$T_branch_idx] to $ru--\n");
    xdbg("new branch [$T_branch_idx] to $ru\n");
    route(NATMANAGE);
}

# Manage incoming replies
onreply_route[MANAGE_REPLY] {
    xlog("L_INFO", "$ci|log|--MANAGE_REPLY--\n");
    xlog("L_INFO", "$ci|log|--Handling SIP response--\n");
    xdbg("incoming reply\n");
    
    if(status=~"18[03]") {
        xlog("L_INFO", "$ci|log|--ringing or session in progress--\n");
    }
    if(status=~"[12][0-9][0-9]") {
        route(NATMANAGE);
    }

  #!ifdef WITH_SIPTRACE
    sip_trace();
  #!endif
    if(nat_uac_test("18")) {
        #force_rport();
        #set_contact_alias();
        if (sdp_content()) {
            if(isflagset(FLAG_FROM_C5)){
                xlog("L_INFO", "$ci|log|-- status [12]xxi from C5 - engage rtpengine--\n"); 
                rtpengine_manage("replace-origin replace-session-connection ICE=remove direction=external direction=internal");
            } else {
                xlog("L_INFO", "$ci|log|-- status [12]xx from outside - engage rtpengine--\n"); 
                rtpengine_manage("replace-origin replace-session-connection ICE=remove direction=internal direction=external");
            }
        }
    }
}


# Manage failure replies
failure_route[MANAGE_FAILURE] {
    xlog("L_INFO", "$ci|log|--MANAGE_FAILURE--\n");
    route(NATMANAGE);

    if (t_is_canceled()) exit;

  #!ifdef WITH_BLOCK3XX
    # block call redirect based on 3xx replies.
    if (t_check_status("3[0-9][0-9]")) {
        t_reply("404","Not found");
        exit;
    }
  #!endif
}

