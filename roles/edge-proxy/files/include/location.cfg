## config/include/location.cfg

# User location service
route[LOCATION] {
xlog("L_INFO", "$ci|log|--LOCATION--\n");
$var(DID) = $rU;

    # search in DB-based aliases
    xlog("L_INFO", "$ci|log|Check if DestNum is DID list \n");
    if(alias_db_lookup("dbaliases")) {
        xlog("L_INFO", "$ci|log|DID found in dbaliases.  R-URI=$ru\n");
        $avp(s:dest)="DID";
        append_hf("P-hint: DID routing\r\n");
    }
    else  {
        xlog("L_INFO", "$ci|log|R-URI=$ru  DID Not found in dbaliases\n");
        return;
    }
    xlog("L_INFO", "$ci|log|Check if corresponding user is registred\n");
    if (!lookup("location")) {
        $var(rc) = $rc;
        #route(TOVOICEMAIL);
        t_newtran();
        switch ($var(rc)) {
        case -1:
            xlog("L_INFO","$ci|log|R-URI=$ru - no contact found in location DB - continue \n");
            send_reply("480", "Temporarily Unavailable");
        case -3:
            xlog("L_INFO","$ci|log|R-URI=$ru - internal error when searching in location DB - 404 \n");
            send_reply("404", "Not Found");
            exit;
        case -2:
            xlog("L_INFO","$ci|log|R-URI=$ru - contacts found, but method not support in location DB - 405 \n");
            send_reply("405", "Method Not Allowed");
            exit;
        }
    } else {
    # User is registered. Overwrite the username part of the R-URI with the DID
    $rU = $var(DID);

    if($hdr(X-PyFB-CallType) == "DIDIN" || $hdr(X-PyFB-CallType) == "DIDOUT") {
        # Numbers normalization
        $var(sipaccount) = $hdr(X-PyFB-SIPAccountId);
        xlog("L_INFO", "SIP Account number : $var(sipaccount)\n");
        # Callee normalization
        if (avp_db_load("$var(sipaccount)", "$avp(s:grpnormcalleein)")) {
          xlog("L_INFO", "$ci|log|Grp callee number normalization rules found $avp(s:grpnormcalleein)\n");
          xlog("L_INFO", "$ci|log|Callee Number before norm : $rU\n");
          if (!dp_translate("$avp(s:grpnormcalleein)", "$rU/$rU")) {
            xlog("L_INFO", "$ci|log|No callee number normalization rules found in grp\n");
          }
          else {
            # To field is not auto updated - do it now
            uac_replace_to("sip:$rU@$rd");
          }

          xlog("L_INFO", "$ci|log|Callee Number after norm : $rU\n");
        } else {
          xlog("L_INFO", "$ci|log|No grp callee number normalization rules found\n");
        }

        # Caller normalization
        if (avp_db_load("$var(sipaccount)", "$avp(s:grpnormcallerin)")) {
          xlog("L_INFO", "$ci|log|Grp caller number normalization rules found $avp(s:grpnormcallerin)\n");
          xlog("L_INFO", "$ci|log|Caller Number before norm : $fU\n");
          if (!dp_translate("$avp(s:grpnormcallerin)", "$fU/$avp(s:callernum)")) {
              xlog("L_INFO", "$ci|log|No caller number normalization rules found in grp\n");
          } else {
              uac_replace_from("$avp(s:callernum)", "sip:$avp(s:callernum)@$fd");
              remove_hf("P-Asserted-Identity");
              append_hf("P-Asserted-Identity: <sip:$avp(s:callernum)@$fd>\r\n");
          }
          xlog("L_INFO", "$ci|log|Caller Number after norm : $avp(s:callernum)\n");
        } else {
          xlog("L_INFO", "$ci|log|No grp caller number normalization rules found\n");
        }
    }

    append_hf("X-PyFB-DestDIDNum: $var(DID)\r\n");
    xlog("L_INFO","$ci|log|R-URI=$ru  Location=$du - contact found in location DB - route to user \n");
    xlog("L_INFO","$ci|log| return \n");
    return;
  }

        # when routing via usrloc, log the missed calls also
        if (is_method("INVITE")) {
            setflag(FLT_ACCFAILED); # -- this is added to record failed calls
            setflag(FLT_ACCMISSED);
        }

  # via FS
  #route(RELAY);
        #exit;
}
