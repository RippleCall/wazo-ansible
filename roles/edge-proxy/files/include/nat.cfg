## config/include/nat.cfg

# Caller NAT detection
route[NATDETECT] {
    xlog("L_INFO", "$ci|log|--start NATDETECT process--\n");
    force_rport();

    if (nat_uac_test("19")) {
        xlog("L_INFO", "$ci|log|----uac NAT test 19 true\n");

        if (is_method("REGISTER")) {
            xlog("L_INFO", "$ci|log|----Method REGISTER -> fix nat\n");
            fix_nated_register();
        } else {
            if(is_first_hop()) {
                xlog("L_INFO", "$ci|log|----First hop - set contact alias\n");
                set_contact_alias();
            }
        }

        xlog("L_INFO", "$ci|log|----Set flag NATS\n");
        setflag(FLT_NATS);
    }

    if (nat_uac_test("3")) {
        fix_nated_contact();
        xlog("L_INFO", "$ci|log|----Rewrites the Contact header to request source ip:port\n");
    }

#!endif
    xlog("L_INFO", "$ci|log| return \n");
    return;
}

route[NATMANAGE] {
    xlog("L_INFO", "$ci|log|--NATMANAGE--\n");

    if (is_request()) {
        if(has_totag()) {
            xlog("L_INFO", "$ci|log|----SIP Request - to-tag found--\n");
            if(check_route_param("nat=yes")) {
                setbflag(FLB_NATB);
                xlog("L_INFO", "$ci|log|----SIP Request - route param nat=yes--\n");
            } else {
               if (check_route_param("nat=ws")) {
					setbflag(FLB_NATWS);
				}
                xlog("L_INFO", "$ci|log|----SIP Request - no route param nat=yes--\n");
            }
        }
    }

    if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB) || isbflagset(FLB_NATWS))) return;


    if(has_body("application/sdp") && nat_uac_test("8")) {
        xlog("L_INFO", "$ci|log|----Fix nated sdp\n");
        fix_nated_sdp("10");
    }

	if (isbflagset(FLB_NATWS)) { # We need RTPEngine web/SIP bridging
		if ($proto =~ "ws") { # This message coming from web --> SIP
			if (is_request()) {
				xlog("L_INFO", "$rm request: WebRTC --> SIP");
			} else {
				xlog("L_INFO", "$rs response: WebRTC --> SIP");
			}

			rtpengine_manage("trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP");
		} else { # This message coming from SIP --> web
			if (is_request()) {
				xlog("L_INFO", "$rm request: SIP --> WebRTC");
			} else {
				xlog("L_INFO", "$rs response: SIP --> WebRTC");
			}

			if(nat_uac_test("8")) {
				rtpengine_manage("replace-origin replace-session-connection rtcp-mux-require ICE=force RTP/SAVPF");
			} else {
				rtpengine_manage("trust-address replace-origin replace-session-connection rtcp-mux-require ICE=force RTP/SAVPF");
			}
		}
	} else { # We need NAT, but not SIP/web bridging
		if ($proto =~ "ws") { # Web --> web
			if (is_request()) {
				xlog("L_INFO", "$rm request: WebRTC --> WebRTC");
			} else {
				xlog("L_INFO", "$rs response: WebRTC --> WebRTC");
			}

			rtpengine_manage("trust-address replace-origin replace-session-connection ICE=force");
		} else { # SIP --> SIP
			if (is_request()) {
				xlog("L_INFO", "$rm request: SIP --> SIP");
			} else {
				xlog("L_INFO", "$rs response: SIP --> SIP");
			}

			if(nat_uac_test("8")) {
				rtpengine_manage("replace-origin replace-session-connection");
			} else {
				rtpengine_manage("trust-address replace-origin replace-session-connection");
			}
		}
	}

    if (is_request()) {
        if (!has_totag()) {
            if(t_is_branch_route()) {
                add_rr_param(";nat=yes");
                xlog("L_INFO", "$ci|log|----SIP Request - to-tag not found - Branch route--\n");
                xlog("L_INFO", "$ci|log|----add nat=yes to Record-Route header--\n");
            }
        }
    }
    
    if (is_reply()) {
        if(isbflagset(FLB_NATB)) {
            if(is_first_hop()) {
                set_contact_alias();
                xlog("L_INFO", "$ci|log|----SIP Reply - FLB_NATB set - First hop--\n");
                xlog("L_INFO", "$ci|log|----add nat=yes to Record-Route header--\n");
            }
        }
    }

    xlog("L_INFO", "$ci|log|----Return \n");
    return;
}

